<?php

namespace ESadewater\LaravelPalette;

use Illuminate\Support\Facades\Blade;
use Spatie\LaravelPackageTools\Package;
use Spatie\LaravelPackageTools\PackageServiceProvider;

class LaravelPaletteServiceProvider extends PackageServiceProvider
{
    public function configurePackage(Package $package): void
    {
        /*
         * This class is a Package Service Provider
         *
         * More info: https://github.com/spatie/laravel-package-tools
         */
        $package
            ->name('laravel-palette');
    }

    public function bootingPackage()
    {
        parent::bootingPackage(); // TODO: Change the autogenerated stub

        Blade::directive('palette', function ($expression) {
            list($name, $baseColor) = self::parseMultipleArgs($expression);

            return "<?php
                if ($baseColor === null)
                    \$palette = \ESadewater\LaravelPalette\Palettes\MonochromaticPalette::fromRandomColor();
                else
                    \$palette = \ESadewater\LaravelPalette\Palettes\MonochromaticPalette::fromColor($baseColor);
                
                echo LaravelPaletteServiceProvider
            ?>";
        });
    }

    /**
     * @return void
     */
    private static function formatPalette()
    {

    }

    /**
     * @param $expression
     * @return string|array
     */
    private static function parseMultipleArgs($expression): string|array
    {
        $args = explode(',', $expression);
        $numArgs = count($args);

        if ($numArgs == 1)
            return $args[0];

        for ($i = 0; $i < $numArgs; $i++) {
            $args[$i] = trim($args[$i]);
        }

        return $args;
    }
}
